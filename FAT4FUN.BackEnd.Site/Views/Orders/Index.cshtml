@model IEnumerable<FAT4FUN.BackEnd.Site.Models.ViewModels.OrderVm>
@using Newtonsoft.Json

@{
    ViewBag.Title = "訂單管理";
}


<div id="app" class="mx-2">
    <div>
        <div>
            <div class="col-md-12">
                <h2 class="text-center mb-4">訂單管理</h2>
            </div>
        </div>

        <!-- 搜尋功能 -->
        <div class="row  mb-3">
            <div class="col-md-2">
                <input type="text" v-model="searchUserId" placeholder="搜尋會員編號" class="form-control" />
            </div>
            <div class="col-md-3">
                <input type="text" v-model="searchQuery" placeholder="搜尋訂單編號" class="form-control" />
            </div>
            <div class="col-md-4 d-flex">
                <input type="date" v-model="startDate" class="form-control mx-2" placeholder="開始日期" />
                <input type="date" v-model="endDate" class="form-control" placeholder="結束日期" />
            </div>
            <div class="col-md-3">
                <select v-model="searchStatus" class="form-control">
                    <option value="">所有狀態</option>
                    <option value="1">處理中</option>
                    <option value="2">已出貨</option>
                    <option value="3">已完成</option>
                    <option value="4">已申請退貨</option>
                    <option value="5">已退貨</option>
                    <option value="6">已取消</option>
                </select>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <table class="table table-bordered table-hover text-center align-middle">
                    <thead class="thead-dark">
                        <tr>
                            <th class="col-md-1">@Html.DisplayNameFor(model => model.UserId)</th>
                            <th class="col-md-2">@Html.DisplayNameFor(model => model.No)</th>
                            <th>@Html.DisplayNameFor(model => model.TotalAmount)</th>
                            <th style="width:150px;">@Html.DisplayNameFor(model => model.Status)</th>
                            <th class="col-md-2">@Html.DisplayNameFor(model => model.CreateDate)</th>
                            <th class="col-md-2">@Html.DisplayNameFor(model => model.ModifyDate)</th>
                            <th class="col-md-2">操作</th>
                        </tr>
                    </thead>
                    <tbody v-for="item in filteredOrders" :key="item.Id" style="vertical-align: middle;">
                        <tr style="color: black;vertical-align: middle;">
                            <td style="vertical-align: middle;">{{ item.UserId }}</td>
                            <td style="vertical-align: middle;">{{ item.No }}</td>
                            <td class="text-right" style="vertical-align: middle;">{{ formatCurrency(item.TotalAmount) }}</td>
                            <td style="vertical-align: middle;">
                                <template v-if="editableOrderId === item.Id">
                                    <select v-model="orders.find(o => o.Id === item.Id).Status" class="form-control">
                                        <option value="1">處理中</option>
                                        <option value="2">已出貨</option>
                                        <option value="3">已完成</option>
                                        <option value="4">已申請退貨</option>
                                        <option value="5">已退貨</option>
                                        <option value="6">已取消</option>
                                    </select>
                                </template>
                                <template v-else class="d-flex align-items-center">
                                    <!-- 使用 align-items-center 讓子元素垂直居中 -->
                                    <span>
                                        <!-- 使用 me-2 來增加間距 -->
                                        <select v-model="orders.find(o => o.Id === item.Id).Status" class="form-control"
                                                :disabled="editableOrderId !== item.Id"
                                                style="background-color: transparent; border: none; color: black; width: 100%; text-align: center; padding: 10px; line-height: 1.5em; font-size: 16px; appearance: none;">
                                            <option value="1">處理中</option>
                                            <option value="2">已出貨</option>
                                            <option value="3">已完成</option>
                                            <option value="4">已申請退貨</option>
                                            <option value="5">已退貨</option>
                                            <option value="6">已取消</option>
                                        </select>
                                    </span>
                                    <span v-if="shouldShowWarning(item)">
                                        <i class="fas fa-exclamation-triangle text-warning" title="訂單處於處理中且超過5天未處理"></i>
                                    </span>
                                </template>
                            </td>
                            <td style="vertical-align: middle;">{{formatDate(item.CreateDate)}}</td>
                            <td style="vertical-align: middle;">{{ formatDate(item.ModifyDate) }}</td>
                            <td style="width:200px;vertical-align: middle;">
                                <!-- 詳情按鈕觸發手風琴 -->
                                <button class="btn btn-info btn-sm" type="button" v-on:click="toggleDetails(item.Id)" aria-expanded="false" :aria-controls="'orderItems-' + item.Id">
                                    詳情
                                </button> |
                                <button class="btn btn-primary btn-sm" v-on:click="editOrder(item.Id)" type="button">編輯</button>
                            </td>
                        </tr>
                        <tr>
                            <td colspan="12" style="color: black;vertical-align: middle;">
                                <!-- 手風琴內容區域 -->
                                <div :id="'orderItems-' + item.Id" class="accordion-collapse collapse" v-bind:class="{ show: visibleDetails === item.Id }">
                                    <div class="card card-body">
                                        <h3 class="card-title">訂單明細 (訂單號碼: {{item.No}})</h3>
                                        <table>
                                            <thead>
                                                <tr>
                                                    <th>收件人姓名</th>
                                                    <th>收件地址</th>
                                                    <th>聯絡電話</th>
                                                    <th>付款方式</th>
                                                    <th>取貨方式</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr>
                                                    <td>
                                                        <input v-if="editableOrderId === item.Id" type="text" v-model="orders.find(o => o.Id === item.Id).RecipientName" class="form-control" maxlength="50" />
                                                        <input v-else v-model="orders.find(o => o.Id === item.Id).RecipientName" class="form-control" style="border: none; outline: none; text-align: center;color: black;" maxlength="50" />
                                                    </td>
                                                    <td>
                                                        <input v-if="editableOrderId === item.Id" type="text" v-model="orders.find(o => o.Id === item.Id).ShippingAddress" class="form-control" maxlength="50" />
                                                        <input v-else v-model="orders.find(o => o.Id === item.Id).ShippingAddress" class="form-control" style="border: none; outline: none; text-align: center; color: black;" maxlength="50" />
                                                    </td>
                                                    <td>
                                                        <input v-if="editableOrderId === item.Id" type="text" v-model="orders.find(o => o.Id === item.Id).Phone" class="form-control" maxlength="10" />
                                                        <input v-else v-model="orders.find(o => o.Id === item.Id).Phone" class="form-control" style="border: none; outline: none; text-align: center; color: black; " maxlength="10" />
                                                    </td>
                                                    <td style="vertical-align: middle;">{{ getPaymentMethodText(item.PaymentMethod) }}</td>
                                                    <td style="vertical-align: middle;">{{ getShippingMethod(item.ShippingMethod) }}</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                        <br />
                                        <table class="table table-bordered" style="color: black;">
                                            <thead>
                                                <tr>
                                                    <th>商品名稱</th>
                                                    <th>規格</th>
                                                    <th>單價</th>
                                                    <th>數量</th>
                                                    <th>小計</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <tr v-for="detail in item.OrderItems" :key="detail.ProductName">
                                                    <td class="text-left">{{detail.ProductName}}</td>
                                                    <td class="text-center">{{detail.SkuItemName}}</td>
                                                    <td class="text-right">{{formatCurrency(detail.Price)}}</td>
                                                    <td class="text-right">{{formatCurrency(detail.Qty)}}</td>
                                                    <td class="text-right">{{formatCurrency(detail.SubTotal)}}</td>
                                                </tr>
                                                <tr>
                                                    <td class="text-right" colspan="4"> 總計:</td>

                                                    <td class="text-right">{{formatCurrency(item.TotalAmount)}}</td>
                                                </tr>
                                            </tbody>
                                        </table>
                                        <div v-if="editableOrderId === item.Id" class="mt-3">
                                            <button class="btn btn-success mx-2" v-on:click="saveOrder(item.Id)">儲存</button>
                                            <button class="btn btn-secondary" v-on:click="cancelEdit()">取消</button>

                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="https://cdn.jsdelivr.net/npm/vue@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script>
        const app = Vue.createApp({
            data() {
                return {
                    orders: @Html.Raw(JsonConvert.SerializeObject(Model)), // 將模型序列化為 JSON
                    visibleDetails: null,
                    editableOrderId: null, // 用來跟踪可編輯的訂單 ID
                    originalOrderData: {}, // 用於保存原始訂單資料
                    searchQuery: '',
                    startDate: '',
                    endDate: '',
                    searchStatus: '',
                    searchUserId:'',

                 };
            },
            computed: {
                filteredOrders() {
                    return this.orders.filter(order => {
                        const matchesQuery = this.searchQuery ? order.No.includes(this.searchQuery) : true;

                        // 取得訂單的創建日期
                        const orderDate = new Date(order.CreateDate).toISOString().split('T')[0];

                        // 判斷日期範圍
                        const matchesDate = (!this.startDate && !this.endDate) ||
                            (this.startDate && this.endDate
                                ? orderDate >= this.startDate && orderDate <= this.endDate
                                : this.startDate && orderDate >= this.startDate
                                || this.endDate && orderDate <= this.endDate);

                        const matchesStatus = this.searchStatus ? order.Status == this.searchStatus : true;

                        const matchesUserId = this.searchUserId ? order.UserId.toString().includes(this.searchUserId) : true; // 假設會員編號的屬性名稱是 UserId

                        return matchesQuery && matchesDate && matchesStatus && matchesUserId;
                    });
                },
            },
            mounted() {
                // 初始化時使用全部訂單
                this.filteredOrders = this.orders;

                // 讀取 URL 中的搜尋參數
                const urlParams = new URLSearchParams(window.location.search);
                const status = urlParams.get('searchStatus');

                if (status) {
                    this.searchStatus = status; // 設置為處理中
                }
            },
            methods: {
                getPaymentMethodText(PaymentMethod) {
                    if (!PaymentMethod) return '未知付款方式'; // 保險措施，防止 undefined
                    switch (PaymentMethod) {
                        case 1:
                            return '貨到付款';
                        case 2:
                            return '信用卡';
                        default:
                            return '未知付款方式';
                    }
                },
                getShippingMethod(ShippingMethod) {
                    if (!ShippingMethod) return '未知取貨方式'; // 保險措施，防止 undefined
                    switch (ShippingMethod) {
                        case 1:
                            return '宅配';
                        case 2:
                            return '自己';
                        default:
                            return '未知付款方式';
                    }
                },
                getStatusText(status) {
                    const orders = this.orders;
                    console.log(orders.find(o => o.Id === 1));
                    switch (status) {
                        case 1:
                            return "處理中";
                        case 2:
                            return "已出貨";
                        case 3:
                            return "已完成";
                        case 4:
                            return "已申請退貨";
                        case 5:
                            return "已退貨";
                        case 6:
                            return "已取消";
                        default:
                            return "未知狀態";
                    }
                },
                formatCurrency(value) {
                    if (typeof value !== "number" || isNaN(value)) {
                        return "0";
                    }
                    return value.toLocaleString();
                },
                formatDate(dateString) {
                    const date = new Date(dateString);

                    // 取得年份、月份和日期
                    const year = date.getFullYear();
                    const month = String(date.getMonth() + 1).padStart(2, '0'); // 月份從 0 開始，需加 1
                    const day = String(date.getDate()).padStart(2, '0');

                    // 取得小時和分鐘
                    const hours = date.getHours();
                    const minutes = date.getMinutes();

                    // 判斷上午或下午
                    const period = hours >= 12 ? '下午' : '上午';

                    // 將小時轉為12小時制
                    const formattedHours = String(hours % 12 || 12).padStart(2, '0');
                    const formattedMinutes = String(minutes).padStart(2, '0'); // 確保分鐘有兩位數

                    // 返回格式化的日期和時間
                    return `${year}-${month}-${day} ${period} ${formattedHours}:${formattedMinutes}`;
                },
                editOrder(itemId) {

                    if (this.editableOrderId === itemId) {
                        this.cancelEdit();
                    } else {
                        // 展開手風琴
                        this.visibleDetails = itemId;

                        this.originalOrderData[itemId] = JSON.parse(JSON.stringify(this.orders.find(o => o.Id === itemId))); // 深拷貝
                        this.editableOrderId = itemId;
                        console.log('Editing order ID:', itemId);
                    }
                },
                saveOrder(orderId) {
                    const updatedOrder = this.orders.find(o => o.Id === orderId);
                    console.log('updatedOrder:', updatedOrder)
                    if (updatedOrder && /\d/.test(updatedOrder.RecipientName)) {
                        alert('姓名不能包含數字！');
                        return; // 終止執行
                    }
                    if (updatedOrder) {
                        const csrfTokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
                        const csrfToken = csrfTokenInput ? csrfTokenInput.value : '';
                        fetch('/Orders/Update', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': csrfToken
                            },
                            body: JSON.stringify(updatedOrder)
                        }).then(response => {
                            if (response.ok) {
                                console.log('訂單更新成功！');
                                this.editableOrderId = null; // 退出編輯狀態
                            } else {
                                console.error('更新失敗！');
                            }
                        }).catch(error => console.error('發生錯誤：', error));
                    }
                },
                cancelEdit() {
                    if (this.editableOrderId !== null) {
                        const orderToRestore = this.orders.find(o => o.Id === this.editableOrderId);
                        Object.assign(orderToRestore, this.originalOrderData[this.editableOrderId]);
                        this.editableOrderId = null; // 退出編輯狀態
                    }
                },
                toggleDetails(orderId) {
                    this.visibleDetails = this.visibleDetails === orderId ? null : orderId;
                },
                isDetailsVisible(orderId) {
                    return this.visibleDetails === orderId;
                },
                shouldShowWarning(item) {
                    const createdDate = new Date(item.CreateDate)
                    const currentDate = new Date();
                    // 計算日期差
                    const daysDiff = Math.floor((currentDate - createdDate) / (1000 * 3600 * 24)); // 轉換為天數
                    
                    // 檢查狀態是否為處理中且是否超過5天
                    return item.Status === 1 && daysDiff > 5;
                },

            }
        });
        app.mount("#app");
    </script>
    <script>

    </script>

}
